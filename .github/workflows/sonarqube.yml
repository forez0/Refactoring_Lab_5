name: SonarQube Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonar-analysis:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "false"  # Тимчасово вимикаємо автентифікацію для тесту

    env:
      SONAR_HOST_URL: http://localhost:9000
      SONAR_PROJECT_KEY: library_service_key
      # SONAR_TOKEN не потрібен, якщо автентифікація вимкнена

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk jq unzip wget

      - name: Cache sonar-scanner
        uses: actions/cache@v3
        with:
          path: ~/.sonar
          key: ${{ runner.os }}-sonar

      - name: Install sonar-scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to start..."
          for i in {1..30}; do
            if curl -s http://localhost:9000/api/system/status | grep -q 'UP'; then
              echo "SonarQube is ready!"
              # Додаткове очікування для повної ініціалізації
              sleep 30
              break
            fi
            sleep 5
          done

      - name: Generate admin token (first run)
        run: |
          # Створюємо адміністраторський токен (якщо це перший запуск)
          curl -u admin:admin -X POST "http://localhost:9000/api/users/change_password" \
            -d "login=admin" \
            -d "previousPassword=admin" \
            -d "newPassword=newpassword"

          curl -u admin:newpassword -X POST "http://localhost:9000/api/user_tokens/generate" \
            -d "name=github_actions_token" \
            -d "login=admin" | jq -r '.token' > sonar_token.txt
          
          SONAR_TOKEN=$(cat sonar_token.txt)
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "Generated SonarQube token"

      - name: Run SonarScanner
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: Fetch coverage via API
        run: |
          echo "Waiting 30 seconds to ensure analysis is processed..."
          sleep 30
          curl -s -u ${{ env.SONAR_TOKEN }}: "" "$SONAR_HOST_URL/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=coverage" \
            | jq -r '.component.measures[0].value' > coverage.txt

      - name: Read and export coverage
        id: coverage
        run: |
          COVERAGE=$(cat coverage.txt)
          echo "CODE_COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage is $COVERAGE%"

      - name: Conditional pass/fail by coverage
        if: ${{ env.CODE_COVERAGE != '' && env.CODE_COVERAGE >= 30 }}
        run: echo "✅ Coverage OK"

      - name: Fail if coverage too low
        if: ${{ env.CODE_COVERAGE == '' || env.CODE_COVERAGE < 30 }}
        run: |
          echo "❌ Coverage too low: ${{ env.CODE_COVERAGE }}%"
          exit 1