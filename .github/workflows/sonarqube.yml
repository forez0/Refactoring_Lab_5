name: SonarQube Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonar-analysis:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_FORCE_AUTHENTICATION: "true"
        volumes:
          - sonarqube_data:/opt/sonarqube/data
          - sonarqube_extensions:/opt/sonarqube/extensions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install sonar-scanner
        run: |
          sudo apt-get install -y wget unzip
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to start..."
          for i in {1..30}; do
            if curl -s -u admin:admin http://localhost:9000/api/system/status | grep -q 'UP'; then
              echo "SonarQube is ready!"
              # Додаткове очікування для повної ініціалізації
              sleep 30
              break
            fi
            sleep 5
          done

      - name: Generate or use existing token
        id: sonar-token
        run: |
          # Спробуємо використати існуючий токен з секретів
          if [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "Using existing SONAR_TOKEN from secrets"
            echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}" >> $GITHUB_ENV
          else
            # Якщо токена немає - генеруємо новий
            echo "Generating new admin token"
            TOKEN=$(curl -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate" \
              -d "name=github_actions_token" \
              -d "login=admin" | jq -r '.token')
            echo "Generated token: $TOKEN"
            echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
          fi

      - name: Verify token
        run: |
          echo "Verifying token..."
          curl -s -u ${{ env.SONAR_TOKEN }}: "" "http://localhost:9000/api/user_tokens/search"

      - name: Run SonarScanner Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=library_service_key \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ env.SONAR_TOKEN }} \
            -X

      - name: Check analysis results
        run: |
          sleep 30
          curl -u ${{ env.SONAR_TOKEN }}: "" "http://localhost:9000/api/qualitygates/project_status?projectKey=library_service_key"