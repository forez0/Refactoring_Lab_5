name: SonarQube Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonar-analysis:
    runs-on: ubuntu-latest

    # Запускаємо SonarQube як сервіс, щоб був доступний на localhost:9000
    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        options: >-
          --env SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true

    env:
      SONAR_HOST_URL: http://localhost:9000
      SONAR_PROJECT_KEY: library_service_key
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y openjdk-17-jdk jq unzip wget

      - name: Cache sonar-scanner
        uses: actions/cache@v3
        with:
          path: /opt/sonar-scanner
          key: ${{ runner.os }}-sonar-scanner

      - name: Install sonar-scanner if needed
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner

      - name: Add sonar-scanner to PATH
        run: echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Wait for SonarQube to be ready
        run: |
          timeout=150
          until curl -s $SONAR_HOST_URL/api/system/status | grep -q UP; do
            sleep 5
            timeout=$((timeout - 5))
            if [ $timeout -le 0 ]; then
              echo "SonarQube did not start in time"
              exit 1
            fi
          done
          echo "SonarQube is ready!"

      - name: Run SonarScanner
        run: |
          sonar-scanner -X \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Fetch coverage via API
        run: |
          echo "Waiting 15 seconds to ensure analysis is processed..."
          sleep 15
          curl -s "$SONAR_HOST_URL/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=coverage" \
            | jq -r '.component.measures[0].value' > coverage.txt

      - name: Read and export coverage
        id: coverage
        run: |
          COVERAGE=$(cat coverage.txt)
          echo "CODE_COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage is $COVERAGE%"

      - name: Conditional pass/fail by coverage
        if: ${{ env.CODE_COVERAGE != '' && env.CODE_COVERAGE >= 30 }}
        run: echo "✅ Coverage OK"

      - name: Fail if coverage too low
        if: ${{ env.CODE_COVERAGE == '' || env.CODE_COVERAGE < 30 }}
        run: |
          echo "❌ Coverage too low: ${{ env.CODE_COVERAGE }}%"
          exit 1
