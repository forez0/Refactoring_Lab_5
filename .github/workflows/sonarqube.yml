name: SonarQube Scan for Python

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  sonar:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:lts
        ports:
          - 9000:9000
        options: >-
          --name=sonarqube
          --health-cmd="curl --silent --fail http://localhost:9000/api/system/status || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper SCM analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest --cov=src --cov-report=xml || echo "No tests found, continuing with SonarQube scan"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Wait for SonarQube to be ready
        run: |
          for i in {1..30}; do
            status=$(curl -s http://localhost:9000/api/system/status | grep -o '"status":"[^"]*"' || echo '"status":"DOWN"')
            if [[ $status == *"UP"* ]]; then
              echo "SonarQube is up and running!"
              break
            else
              echo "Waiting for SonarQube to be ready... Attempt $i/30"
              sleep 10
            fi
            if [ $i -eq 30 ]; then
              echo "Failed to start SonarQube in time"
              exit 1
            fi
          done

      - name: Create SonarQube project and token
        run: |
          # Wait for SonarQube to be fully initialized
          sleep 30
          
          # Login to get a session cookie (default admin credentials)
          CSRF_TOKEN=$(curl -s -X POST -u admin:admin http://localhost:9000/api/authentication/login | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
          COOKIE=$(curl -s -X POST -u admin:admin http://localhost:9000/api/authentication/login -i | grep -i "set-cookie" | cut -d":" -f2 | cut -d";" -f1)
          
          # Create a new token
          RESPONSE=$(curl -s -X POST "http://localhost:9000/api/user_tokens/generate" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -b "$COOKIE" \
            -d "name=github-actions-token" \
            -d "login=admin")
          
          # Extract token from response
          TOKEN=$(echo $RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
          
          if [ -z "$TOKEN" ]; then
            echo "Failed to create token"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          # Save token for later steps
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
          
          # Check if the project already exists
          PROJECT_EXISTS=$(curl -s -u $TOKEN: "http://localhost:9000/api/projects/search?q=library_service_key" | grep -o '"key":"library_service_key"')
          
          if [ -z "$PROJECT_EXISTS" ]; then
            # Create the project
            curl -s -X POST "http://localhost:9000/api/projects/create" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -b "$COOKIE" \
              -d "name=Library Service" \
              -d "project=library_service_key"
          fi

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download and extract SonarScanner
        run: |
          mkdir -p $HOME/.sonar
          wget -O $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip -q $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          export PATH=$HOME/.sonar/sonar-scanner-4.8.0.2856-linux/bin:$PATH
          echo "$HOME/.sonar/sonar-scanner-4.8.0.2856-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=library_service_key \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=./src \
            -Dsonar.python.coverage.reportPaths=coverage.xml