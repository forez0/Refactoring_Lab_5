name: SonarQube Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonar-analysis:
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube:community
        ports:
          - 9000:9000
        options: >-
          --health-cmd="curl -s http://localhost:9000/api/system/health | grep -q '\"status\":\"GREEN\"'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      SONAR_HOST_URL: http://localhost:9000
      SONAR_PROJECT_KEY: library_service_key
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for SonarQube to be ready
      run: |
        for i in {1..30}; do
          STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status')
          if [ "$STATUS" == "UP" ]; then
            echo "SonarQube is ready!"
            break
          fi
          echo "Waiting for SonarQube..."
          sleep 5
        done

    - name: Build SonarScanner image
      run: |
        docker build -t custom-sonarscanner -f sonar-scanner.Dockerfile .

    - name: Run SonarScanner
      run: |
        docker run --rm \
          --network=host \
          -e SONAR_HOST_URL=$SONAR_HOST_URL \
          -e SONAR_TOKEN=$SONAR_TOKEN \
          -v "$PWD:/usr/src" \
          custom-sonarscanner

    - name: Get code coverage
      run: |
        sleep 10
        curl -s "$SONAR_HOST_URL/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=coverage" \
          | jq -r '.component.measures[0].value' > coverage.txt

    - name: Export coverage to env
      id: coverage
      run: |
        COVERAGE=$(cat coverage.txt)
        echo "code_coverage=$COVERAGE" >> $GITHUB_ENV
        echo "Coverage is $COVERAGE%"

    - name: Check if coverage is sufficient
      if: ${{ env.code_coverage >= 30 }}
      run: echo "✅ Coverage is acceptable"

    - name: Fail if coverage too low
      if: ${{ env.code_coverage < 30 }}
      run: |
        echo "❌ Coverage too low: ${{ env.code_coverage }}%"
        exit 1
