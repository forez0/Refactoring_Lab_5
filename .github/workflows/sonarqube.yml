name: SonarQube Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonar-analysis:
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: http://localhost:9000
      SONAR_PROJECT_KEY: my-project
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Start SonarQube container
      run: |
        docker run -d \
          --name sonarqube \
          -p 9000:9000 \
          -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
          sonarqube:community

    - name: Wait for SonarQube to be ready
      run: |
        echo "Waiting for SonarQube..."
        for i in {1..30}; do
          if curl -s http://localhost:9000/api/system/status | grep -q 'UP'; then
            echo "SonarQube is ready!"
            break
          fi
          sleep 5
        done

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-17-jdk jq

    - name: Cache sonar-scanner
      uses: actions/cache@v3
      with:
        path: ~/.sonar
        key: ${{ runner.os }}-sonar

    - name: Install sonar-scanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner-cli-5.0.1.3006-linux.zip
        sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
        echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

    - name: Run SonarScanner
      run: |
        sonar-scanner \
          -Dsonar.projectKey=$SONAR_PROJECT_KEY \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

    - name: Fetch coverage via API
      run: |
        sleep 10  # ensure analysis is processed
        curl -s "$SONAR_HOST_URL/api/measures/component?component=$SONAR_PROJECT_KEY&metricKeys=coverage" \
          | jq -r '.component.measures[0].value' > coverage.txt

    - name: Read and export coverage
      id: coverage
      run: |
        COVERAGE=$(cat coverage.txt)
        echo "code_coverage=$COVERAGE" >> $GITHUB_ENV
        echo "Coverage is $COVERAGE%"

    - name: Conditional pass/fail by coverage
      if: ${{ env.code_coverage >= 30 }}
      run: echo "✅ Coverage OK"

    - name: Fail if coverage too low
      if: ${{ env.code_coverage < 30 }}
      run: |
        echo "❌ Coverage too low: ${{ env.code_coverage }}%"
        exit 1
